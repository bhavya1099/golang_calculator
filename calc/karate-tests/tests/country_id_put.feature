# ********RoostGPT********

# Test generated by RoostGPT for test karate-test using AI Type Azure Open AI and AI Model roostgpt-4-32k
# 
# Feature file generated for /country/{id}_put for http method type PUT 
# RoostTestHash=e5eb5af926
# 
# 

# ********RoostGPT********
Feature: Update Country by ID API Tests

  Background:
    * def baseURL = karate.properties['SAMPLE_API_BASE_URL'] || karate.properties['API_HOST']
    * url baseURL
    * def authToken = karate.properties['AUTH_TOKEN']
    * configure headers = { Authorization: '#(authToken)', Accept: 'application/json' }

  Scenario Outline: Update country by ID with valid inputs
    Given path '/country/<id>'
    And header app-identifier = <app_identifier>
    And header customer-secret-key = <customer_secret_key>
    And request
      """
      {
        "name": "<name>",
        "code": "<code>",
        "currencies": <currencies>,
        "default_currency": "<default_currency>",
        "is_active": <is_active>
      }
      """
    When method PUT
    Then status 200
    And match response.status == 'success'
    And match response.message == 'Country updated successfully'
    And match response.data.id == <id>
    And match response.data.name == '#? _ == null || typeof _ == "string"'
    And match response.data.code == '#string'
    And match response.data.default_currency == '#string'
    And match response.data.is_active == '#number'
    And match response.data.app_id == '#number'
    And match response.data.customer_id == '#number'
    And match response.data.created_by == '#number'
    And match response.data.updated_by == '#number'
    And match response.data.created_at == '#string'
    And match response.data.updated_at == '#string'
    And match response.data.currencies == '#[]'

    Examples:
      | read('country_id_put.csv') |

  Scenario: Update country by ID with invalid input (missing required headers)
    Given path '/country/32'
    And request
      """
      {
        "name": "INDIA",
        "code": "IND",
        "currencies": ["INR", "USD", "EURO"],
        "default_currency": "INR",
        "is_active": 1
      }
      """
    When method PUT
    Then assert responseStatus != 200
    And match response.error.code == '#string'
    And match response.error.message == '#string'

  Scenario Outline: Update country by ID with invalid input data types
    Given path '/country/<id>'
    And header app-identifier = <app_identifier>
    And header customer-secret-key = <customer_secret_key>
    And request
      """
      {
        "name": "<name>",
        "code": "<code>",
        "currencies": <currencies>,
        "default_currency": "<default_currency>",
        "is_active": <is_active>
      }
      """
    When method PUT
    Then assert responseStatus != 200
    And match response.error.code == '#string'
    And match response.error.message == '#string'

    Examples:
      | id | app_identifier                                                 | customer_secret_key                                            | name | code  | currencies            | default_currency | is_active |
      | 32 | 'd645d2b40811f5672c93794d8622da45588f32cdb2ed85336475bf479e5d' | '12546580645c21b8a3529680f455f715b6b6829da8976bdfd2e9d51181fe' | null | 'IND' | ['INR', 'USD', '123'] | 'INR'            |       0.5 |
