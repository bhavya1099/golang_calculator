# ********RoostGPT********

# Test generated by RoostGPT for test karate-test using AI Type Azure Open AI and AI Model roostgpt-4-32k
# 
# Feature file generated for /laureates_get for http method type GET 
# RoostTestHash=ff433d7857
# 
# 

# ********RoostGPT********
Feature: Test Nobel Prize Laureates API

  Background:
    """
    * def baseURL = karate.properties['NOBEL_PRIZE_MASTER_DATA_BASE_URL'] || karate.properties['API_HOST']
    * url baseURL
    * header Accept = 'application/json'
    """

  Scenario Outline: Validate successful response for filtering laureates
    Given path '/2.1/laureates'
    And param offset = <offset>
    And param limit = <limit>
    When method GET
    Then status 200
    And match response.laureates == '#array'
    And match each response.laureates[*].id == '#number'
    And match each response.laureates[*].laureateIfPerson.gender == '##string'
    And match response.meta.offset == '#number'
    And match response.meta.limit == '#number'

    Examples:
      | offset | limit |
      | 1      | 10    |
      | 5      | 50    |

  Scenario Outline: Validate unsuccessful response for malformed syntax
    Given path '/2.1/laureates'
    And param birthDate = <birthDate>
    When method GET
    Then status 400
    And match response.code == '404'
    And match response.message == 'There is not Laureate born that date'

    Examples:
      | birthDate           |
      | ['abcd']            |
      | ['xyz']             |

  Scenario: Validate metadata structure and response consistency
    Given path '/2.1/laureates'
    And param limit = 20
    When method GET
    Then status 200
    And match response.meta == '#object'
    And match response.meta.offset == '#number'
    And match response.meta.limit == '#number'
    And match response.meta.name == '##string'

  Scenario Outline: Validate filtered laureates by name
    Given path '/2.1/laureates'
    And param name = <name>
    When method GET
    Then status 200
    And match response.laureates == '#array'
    And match each response.laureates[*].laureateIfPerson.knownName == '##object'

    Examples:
      | name               |
      | ['Alfred Nobel']   |
      | ['Marie Curie']    |

  Scenario: Validate response structure for empty result
    Given path '/2.1/laureates'
    And param yearTo = 2100
    When method GET
    Then status 200
    And match response.laureates == '#array'
    And assert karate.sizeOf(response.laureates) == 0

  Scenario Outline: Validate response for unprocessable entity
    Given path '/2.1/laureates'
    And param deathDateTo = <deathDateTo>
    When method GET
    Then status 422
    And match response.code == '404'
    And match response.message == 'There is not Laureate born that date'

    Examples:
      | deathDateTo        |
      | ['abcd']           |
      | ['xyz']            |

  Scenario Outline: Validate response for invalid ID parameter
    Given path '/2.1/laureates'
    And param ID = <ID>
    When method GET
    Then status 404
    And match response.code == '404'
    And match response.message == 'There is not Laureate born that date'

    Examples:
      | ID                 |
      | ['-1']             |
      | ['0']              |

  Scenario: Validate laureates response content and nested objects
    Given path '/2.1/laureates'
    When method GET
    Then status 200
    And match response.laureates == '#array'
    And match each response.laureates[*].id == '#number'
    And match each response.laureates[*].laureateIfPerson.birth.date == '##string'
    And match each response.laureates[*].laureateIfOrg.orgName.en == '##string'

  Scenario: Validate pagination links in response
    Given path '/2.1/laureates'
    And param offset = 5
    And param limit = 10
    When method GET
    Then status 200
    And match response.links == '#array'
    And match response.links[*].self == '##string'
    And match response.links[*].next == '##string'
    And match response.links[*].last == '##string'

  Scenario Outline: Validate successful response for specific affiliation filter
    Given path '/2.1/laureates'
    And param affiliation = <affiliation>
    When method GET
    Then status 200
    And match response.laureates == '#array'
    And match each response.laureates[*].nobelPrizes[*].affiliations[*].name.en == '##string'

    Examples:
      | affiliation        |
      | ['University']     |
      | ['Institute']      |

  Scenario Outline: Validate sort order for laureates
    Given path '/2.1/laureates'
    And param sort = <sort>
    When method GET
    Then status 200
    And match response.laureates == '#array'

    Examples:
      | sort               |
      | ['asc']            |
      | ['desc']           |
