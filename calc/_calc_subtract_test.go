// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=Subtract_559013d27f
ROOST_METHOD_SIG_HASH=Subtract_29b74c09c9

FUNCTION_DEF=func Subtract(num1, num2 int) int 
                            תסריט 1: בדיקה של פונקציה Subtract עם מספרים חיוביים
                                                                                
                                                                          פרטים:
  .תיאור: בודק האם הפונקציה מחזירה ערך נכון כאשר הקלטים הם שני מספרים חיוביים.
                                                                          ביצוע:
                  .הגדרות: הגדר שני משתנים עם ערכים חיוביים (לדוגמה, 10 ו-5)
                             .פעולה: קריאה לפונקציה Subtract עם המשתנים האלה
                 .אשור: וודא שהפונקציה מחזירה את ההפרש הנכון בין שני המספרים
                                                                        ולידציה:
.הסבר על בחירת האישור: מכיוון שהמספרים חיוביים והתוצאה צריכה להיות ערך תקין, אנו מצפים לקבל את ההפרש הנכון
.חשיבות הבדיקה: פונקציה זו עשויה להיות בבסיס חישובים מורכבים יותר ולכן חשוב לוודא שהיא עובדת נכון בקלטים רגילים
                                                                                
                                                                             ---
                                                                                
                            תסריט 2: בדיקה של פונקציה Subtract עם מספרים שליליים
                                                                                
                                                                          פרטים:
   .תיאור: בודק האם הפונקציה מחזירה ערך נכון כאשר הקלטים הם שני מספרים שליליים
                                                                          ביצוע:
                .הגדרות: הגדר שני משתנים עם ערכים שליליים (לדוגמה, -10 ו--5)
                             .פעולה: קריאה לפונקציה Subtract עם המשתנים האלה
              .אשור: וודא שהפונקציה מחזירה את ההפרש בין שני המספרים השליליים
                                                                        ולידציה:
.הסבר על בחירת האישור: כיוון שמספרים שליליים משפיעים על חישובי ההפרש, נדרש לוודא שהתוצאה מדויקת
  .חשיבות הבדיקה: כיסוי חישובים בקלט שלילי עשוי למנוע בעיות בתרחישים עתידיים
                                                                                
                                                                             ---
                                                                                
                                     תסריט 3: בדיקה עם קלט אפס לפונקציה Subtract
                                                                                
                                                                          פרטים:
                  .תיאור: בודק את ההתנהגות של הפונקציה כאשר אחד הקלטים הוא אפס
                                                                          ביצוע:
      .הגדרות: הגדר משתנה אחד עם ערך אפס והשני עם ערך חיובי (לדוגמה, 10 ו-0)
                             .פעולה: קריאה לפונקציה Subtract עם המשתנים האלה
                .אשור: וודא ש-Subtract מחזירה את המספר השני במקרה שאפס מחוסר
                                                                        ולידציה:
.הסבר על בחירת האישור: פונקציה פשטנית כמו זו צריכה לטפל באפס בצורה הצפויה והתקינה
.חשיבות הבדיקה: חישובים עם קלט אפס הם נפוצים מאוד ולכן יש לוודא שהם עובדים כהלכה
                                                                                
                                                                             ---
                                                                                
                                        תסריט 4: בדיקת קלט שבו שני המשתנים שווים
                                                                                
                                                                          פרטים:
                    .תיאור: בודק האם הפונקציה מחזירה אפס כאשר שני הקלטים שווים
                                                                          ביצוע:
                      .הגדרות: הגדר שני משתנים עם ערכים זהים (לדוגמה, 7 ו-7)
                             .פעולה: קריאה לפונקציה Subtract עם המשתנים האלה
                                 .אשור: וודא שהפונקציה מחזירה אפס במקרים אלה
                                                                        ולידציה:
.הסבר על בחירת האישור: כאשר המספרים שווים, ההפרש אמור להיות אפס בהתאם ללוגיקה
    .חשיבות הבדיקה: מוודא שגם במקרים גבוליים כאלה הפונקציה נותנת תוצאה נכונה
                                                                                
                                                                             ---
                                                                                
                                    תסריט 5: בדיקת פונקציה עם מספרים גדולים מאוד
                                                                                
                                                                          פרטים:
             .תיאור: בודק את דיוק הפונקציה כאשר עובדים עם מספרים גדולים במיוחד
                                                                          ביצוע:
         .הגדרות: הגדר שני משתנים עם ערכים גדולים מאוד (לדוגמה, 10^9 ו-10^8)
                             .פעולה: קריאה לפונקציה Subtract עם המשתנים האלה
            .אשור: וודא שהפונקציה מחזירה את ההפרש המדויק בין המספרים הגדולים
                                                                        ולידציה:
.הסבר על בחירת האישור: מספרים גדולים ושימוש בחישובים מדויקים יכולים לחשוף בעיות בזיכרון או במעבדים
                .חשיבות הבדיקה: תורם ליציבות הפונקציה גם בתנאי עומס קיצוניים
                                                                                
                                                                             ---
                                                                                
                             תסריט 6: בדיקה עם קלט של מספר מינימלי ומספר מקסימלי
                                                                                
                                                                          פרטים:
.תיאור: בודק את הפונקציה כאשר אחד הקלטים הוא המספר המקסימלי האפשרי והשני המספר המינימלי האפשרי
                                                                          ביצוע:
         .הגדרות: הגדר משתנה אחד עם הערך של Math.MaxInt והאחר עם Math.MinInt
                             .פעולה: קריאה לפונקציה Subtract עם המשתנים האלה
.אשור: וודא שהפונקציה מבצעת את ההפרש מבלי לגרום לשגיאות Overflow או Underflow
                                                                        ולידציה:
.הסבר על בחירת האישור: תרחישים קיצוניים אלו עוזרים לוודא את יציבות הפונקציה בריצה רגילה
       .חשיבות הבדיקה: מבטיח רמת עמידות גבוהה לשימוש במצבים מורכבים ומאתגרים
                                                                                
                                                                             ---
                                                                                
*/

// ********RoostGPT********


package calc

import (
	"fmt"
	"math"
	"os"
	"strings"
	"testing"
	"runtime/debug"
)







func TestSubtract(t *testing.T) {

	var capturedOutput strings.Builder
	_, _ = fmt.Fprintf(&capturedOutput, "Starting Subtraction Tests:\n")

	tests := []struct {
		name          string
		num1          int
		num2          int
		expected      int
		expectedPanic bool
	}{
		{
			name:     "Positive numbers subtraction test",
			num1:     10,
			num2:     5,
			expected: 5,
		},
		{
			name:     "Negative numbers subtraction test",
			num1:     -10,
			num2:     -5,
			expected: -5,
		},
		{
			name:     "Zero handling test",
			num1:     10,
			num2:     0,
			expected: 10,
		},
		{
			name:     "Equal numbers test",
			num1:     7,
			num2:     7,
			expected: 0,
		},
		{
			name:     "Large numbers subtraction test",
			num1:     1000000000,
			num2:     100000000,
			expected: 900000000,
		},
		{
			name:          "Extreme boundary values test",
			num1:          math.MaxInt64,
			num2:          math.MinInt64 + 1,
			expected:      math.MaxInt64 - (math.MinInt64 + 1),
			expectedPanic: false,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			defer func() {
				if r := recover(); r != nil {
					t.Logf("Panic encountered during %s test. Details:\n%v\n%s", tc.name, r, string(debug.Stack()))
					if !tc.expectedPanic {
						t.Fail()
					}
				}
			}()

			result := Subtract(tc.num1, tc.num2)

			t.Logf("Test \"%s\":\n\tNum1: %d\n\tNum2: %d\n\tExpected: %d\n\tActual: %d", tc.name, tc.num1, tc.num2, tc.expected, result)

			if result != tc.expected {
				t.Errorf("Test failed! Expected: %d, Got: %d", tc.expected, result)
			} else {
				t.Logf("Test passed successfully: %s", tc.name)
			}
		})
	}

	_, _ = os.Stdout.Write([]byte(capturedOutput.String()))
}