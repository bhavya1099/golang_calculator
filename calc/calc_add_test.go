// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=Add_38f6779755
ROOST_METHOD_SIG_HASH=Add_8e349a90e1

FUNCTION_DEF=func Add(num1, num2 int) int 
                                                                                
                     תסריט [מספר]: בדיקה של החישוב הנורמלי של שני מספרים חיוביים
                                                                                
                                                                          פרטים:
.תיאור: תסריט זה מיועד לבדוק את הפונקציה Add עם שני מספרים חיוביים רגילים ולוודא שהפלט ממיר את הפעולה ובסדר הנכון
                                                                          ביצוע:
                  .סידור: הגדרת שני מספרים חיוביים, num1 ו-num2, למשל 5 ו-10
                              .פעולה: קריאת הפונקציה Add עם הפרמטרים שהוגדרו
       .אימות: בדיקת הפלט מול הערך הצפוי שהוא הסכום של המספרים (15 במקרה זה)
                                                                        ולידציה:
.הסבר על הסיבה לבחירת האשירות: בדיקה פרקטית בהקשר פעולה תקנית, דבר המבטיח פונקציה בסיסית של המערכת
          .הסבר על חשיבות התסריט: חיוני לאימות העבודה התקינה בזמן חישוב רגיל
                                                                                
                                                                             ---
                                                                                
                         תסריט [מספר]: בדיקה של חישוב עם אחד הפרמטרים השווים ל-0
                                                                                
                                                                          פרטים:
              .תיאור: לוודא שהפונקציה מבצעת חישוב נכון כאשר אחד מהמספרים הוא 0
                                                                          ביצוע:
                          .סידור: הגדרת num1 כ-0 ו-num2 עם ערך חיובי כגון 10
                                      .פעולה: קריאת הפונקציה Add עם הפרמטרים
           .אימות: בדיקת אם הפלט שווה ל-num2 (לדוגמה, התוצאה צריכה להיות 10)
                                                                        ולידציה:
 .הסבר על הסיבה לבחירת האשירות: ציון תרחיש קצה שבו אחד הערכים חסר והשני פעיל
          .הסבר על חשיבות התסריט: מבטיח פעולה אמינה כשכתוב מספר בקצה המשוואה
                                                                                
                                                                             ---
                                                                                
                             תסריט [מספר]: בדיקה של חישוב עם שני פרמטרים שליליים
                                                                                
                                                                          פרטים:
          .תיאור: לוודא שהפונקציה מבצעת חישוב נכון כאשר שני המספרים הם שליליים
                                                                          ביצוע:
                                    .סידור: הגדרת num1 כ-(-5) ו-num2 כ-(-10)
                              .פעולה: קריאת הפונקציה Add עם הפרמטרים שהוגדרו
                                 .אימות: בדיקת ערך הפלט מול הערך הצפוי (-15)
                                                                        ולידציה:
.הסבר על הסיבה לבחירת האשירות: בדיקה להתמודד עם חישובים במערכת של מספרים שליליים
     .הסבר על חשיבות התסריט: מאפשר התמודדות צפויה עם נתוני משתמש שלא חיוביים
                                                                                
                                                                             ---
                                                                                
                          תסריט [מספר]: בדיקה של חישוב עם שני פרמטרים השווים ל-0
                                                                                
                                                                          פרטים:
      .תיאור: לבדוק אם הפונקציה מטפלת כראוי בסכימה של שני הערכים המוגדרים כאפס
                                                                          ביצוע:
                             .סידור: הגדרה של num1 ו-num2 עם ערכים שווים ל-0
                                      .פעולה: קריאת הפונקציה Add עם הפרמטרים
                                           .אימות: בדיקת אם הפלט הוא בדיוק 0
                                                                        ולידציה:
.הסבר על הסיבה לבחירת האשירות: בדיקה לתפקוד הפונקציה עם הערכים הנמוכים ביותר האפשריים
                      .הסבר על חשיבות התסריט: בסיס המרכז לבדיקת גבולות סכימה
                                                                                
                                                                             ---
                                                                                
                        תסריט [מספר]: בדיקה של חישוב עם ערכים מקסימליים עבור int
                                                                                
                                                                          פרטים:
.תיאור: לוודא שהפונקציה יכולה להתמודד עם חישוב ערכים גבוהים במיוחד, למשל ערכים מקסימליים של int
                                                                          ביצוע:
                .סידור: הגדרת num1 ו-num2 לערכים הגבוהים ביותר ב-Go עבור int
                                       .פעולה: קריאת פונקציה Add עם הפרמטרים
    .אימות: לוודא האם הפונקציה מתמודדת ומשלימה בצורה נכונה או נכשלת עם שגיאה
                                                                        ולידציה:
  .הסבר על הסיבה לבחירת האשירות: להבטיח יציבות עם נתונים צפויים בתחום גבוהים
            .הסבר על חשיבות התסריט: הערכת יכולת להימנע מהתפקק בחישובים כבדים
                                                                                
                                                                             ---
                                                                                
*/

// ********RoostGPT********


package calc

import (
	"fmt"
	"os"
	"testing"
	"runtime/debug"
)







func TestAdd(t *testing.T) {

	tests := []struct {
		name        string
		num1        int
		num2        int
		expected    int
		expectPanic bool
	}{
		{
			name:        "Normal positive numbers",
			num1:        5,
			num2:        10,
			expected:    15,
			expectPanic: false,
		},
		{
			name:        "One parameter is zero",
			num1:        0,
			num2:        10,
			expected:    10,
			expectPanic: false,
		},
		{
			name:        "Negative numbers",
			num1:        -5,
			num2:        -10,
			expected:    -15,
			expectPanic: false,
		},
		{
			name:        "Both parameters are zero",
			num1:        0,
			num2:        0,
			expected:    0,
			expectPanic: false,
		},
		{
			name:        "Max int values",
			num1:        int((^uint(0)) >> 1),
			num2:        int((^uint(0)) >> 1),
			expected:    0,
			expectPanic: true,
		},
	}

	oldStdout := os.Stdout
	r, w, _ := os.Pipe()
	os.Stdout = w

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {

			defer func() {
				if r := recover(); r != nil {
					t.Logf("Panic encountered, failing test for scenario '%s'. Panic: %v\n%s", tt.name, r, string(debug.Stack()))
					t.Fail()
				}
			}()

			output := Add(tt.num1, tt.num2)

			if output != tt.expected {
				t.Logf("Failure in scenario '%s': Expected '%d', but got '%d'.", tt.name, tt.expected, output)
				t.Fail()
			} else {
				t.Logf("Success in scenario '%s': Output and expected matched.", tt.name)
			}

			if tt.expectPanic && r == nil {
				t.Logf("Failure in scenario '%s': Expected a panic but none occurred.", tt.name)
				t.Fail()
			}

		})
	}

	w.Close()
	os.Stdout = oldStdout
	fmt.Fscanf(r, "%s")

}