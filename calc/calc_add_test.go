// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=Add_38f6779755
ROOST_METHOD_SIG_HASH=Add_8e349a90e1

FUNCTION_DEF=func Add(num1, num2 int) int 
                            תרחיש [1]: בדיקת פעולה תקינה עבור שני מספרים חיוביים
                                                                                
                                                                          פרטים:
 .תיאור: תרחיש זה נועד לבדוק את פעולת הפונקציה כאשר מועברים שני מספרים חיוביים
                                                                          ביצוע:
               .סידור: יצירת שני מספרים חיוביים (לדוגמה: num1 = 5, num2 = 3)
                                 .פעולה: קריאה לפונקציה Add עם הערכים שנקבעו
             .אימות: יש לבדוק שהתוצאה שווה לסכום המספרים (לדוגמה: תוצאה = 8)
                                                                        ולידציה:
                             הסבר על הבחירה במבחן והלוגיקה מאחורי התוצאה הצפויה:
.הבדיקה מבטיחה שהפונקציה מבצעת את פעולת הסכום בצורה תקינה עבור קלטים רגילים.
.התרחיש קריטי לתפקוד תקין של הפונקציה באפליקציה, שכן פעולת הסכום היא פונדמנטלית
                                                                                
                                                                             ---
                                                                                
                            תרחיש [2]: בדיקת פעולה תקינה עבור שני מספרים שליליים
                                                                                
                                                                          פרטים:
.תיאור: בדיקה לוודא שהפונקציה יכולה להתמודד עם שני ערכים שליליים בצורה תקינה ולהפיק תוצאה נכונה
                                                                          ביצוע:
             .סידור: יצירת שני מספרים שליליים (לדוגמה: num1 = -5, num2 = -3)
                                               .פעולה: קריאה ל-Add עם הערכים
            .אימות: יש לבדוק שהתוצאה שווה לסכום המספרים (לדוגמה: תוצאה = -8)
                                                                        ולידציה:
                                                      הסבר על החשיבות של הבדיקה:
.הבדיקה חשובה להבטחת שהפונקציה מטפלת נכון בקלטים שליליים, דבר המאפשר תמיכה במגוון רחב של נתונים באפליקציה
                                                                                
                                                                             ---
                                                                                
                                תרחיש [3]: בדיקת פעולה עם מספר חיובי ומספר שלילי
                                                                                
                                                                          פרטים:
.תיאור: בדיקה לוודא שהפונקציה מבצעת סכום תקין כאשר מעורב מספר חיובי ומספר שלילי
                                                                          ביצוע:
          .סידור: הגדרת מספר חיובי ומספר שלילי (לדוגמה: num1 = 5, num2 = -3)
                                               .פעולה: קריאה ל-Add עם הערכים
         .אימות: יש לבדוק שהתוצאה שווה להפרש בין המספרים (לדוגמה: תוצאה = 2)
                                                                        ולידציה:
                                                  הסבר על הלוגיקה ותפקיד הבדיקה:
.הבדיקה מאשרת שהשימוש בחיובי ושלילי מפיק תוצאות נכונות המשקפות התנהגות צפויה של פעולת סכום
                                                                                
                                                                             ---
                                                                                
                                 תרחיש [4]: בדיקת פעולה כאשר אחד המספרים הוא אפס
                                                                                
                                                                          פרטים:
    .תיאור: בדיקה שמוודאת שהפונקציה מתנהגת בצורה תקינה כאשר אחד הקלטים הוא אפס
                                                                          ביצוע:
                 .סידור: הגדרת אחד המספרים כאפס (לדוגמה: num1 = 0, num2 = 7)
                                               .פעולה: קריאה ל-Add עם הערכים
                .אימות: יש לוודא שהתוצאה שווה למספר השני (לדוגמה: תוצאה = 7)
                                                                        ולידציה:
                                                                  חשיבות הבדיקה:
.התרחיש מבטיח שהפונקציה מטפלת במקרים שבהם אחד המספרים הוא אפס, דבר חיוני לתמיכה בקלטים מגוונים
                                                                                
                                                                             ---
                                                                                
                                תרחיש [5]: בדיקת פעולה כאשר שני המספרים הם אפסים
                                                                                
                                                                          פרטים:
    .תיאור: בדיקה לוודא שהפונקציה מחזירה תוצאה תקינה כאשר שני המספרים הם אפסים
                                                                          ביצוע:
                           .סידור: הגדרת שני הקלטים כ-0 (num1 = 0, num2 = 0)
                                               .פעולה: קריאה ל-Add עם הערכים
                                           .אימות: יש לבדוק שהתוצאה שווה ל-0
                                                                        ולידציה:
                                                          הסבר על הבחירה בתרחיש:
.תרחיש זה מבטיח שהפונקציה מסוגלת להתמודד עם גבולות פשוטים וערכים ניטרליים, רלוונטי לצרכים בסיסיים
                                                                                
                                                                             ---
                                                                                
                                 תרחיש [6]: בדיקת פעולה עם ערכי גבול גדולים מאוד
                                                                                
                                                                          פרטים:
.תיאור: בדיקה שמוודאת שהפונקציה מסוגלת להוסיף ערכים גדולים מאוד בצורה תקינה ללא חריגות
                                                                          ביצוע:
  .סידור: הגדרת שני מספרים גדולים מאוד (לדוגמה: num1 = 2147483646, num2 = 1)
                                            .פעולה: קריאה לפונקציה עם הערכים
.אימות: יש לבדוק שהתוצאה נכונה ושאינה חורגת מגבולות טיפוס int (לדוגמה: תוצאה = 2147483647)
                                                                        ולידציה:
                                                                   תכלית הבדיקה:
.הבדיקה מבטיחה התאמה למצבים בקצה גבול המספרים המותרים בהתאם לטיפוס הנתונים, חלק בלתי נפרד מיציבות מערכת
                                                                                
                                                                             ---
                                                                                
                        תרחיש [7]: בדיקת פעולה עם ערכי גבול קטנים מאוד (שליליים)
                                                                                
                                                                          פרטים:
           .תיאור: בדיקה שמוודאת יכולת הפונקציה לטפל בערכים שליליים קטנים מאוד
                                                                          ביצוע:
.סידור: הגדרת שני ערכים שליליים קרובים למינימום הטיפוס (לדוגמה: num1 = -2147483647, num2 = -1)
                                               .פעולה: קריאה ל-Add עם הערכים
.אימות: יש לבדוק שהתוצאה שווה לערך הצפוי ושאינה חורגת מטווח הטיפוס (לדוגמה: תוצאה = -2147483648)
                                                                        ולידציה:
                                                                           הסבר:
.הבדיקה מבטיחה תקשורת תקינה עם ערכים בקצה הטיפוס והמשכיות פעולה של המערכת עם נתוני קצה
                                                                                
*/

// ********RoostGPT********


package calc

import (
	"os"
	"testing"
	"runtime/debug"
)







func TestAdd(t *testing.T) {

	tests := []struct {
		name     string
		num1     int
		num2     int
		expected int
	}{
		{

			name:     "Positive Numbers",
			num1:     5,
			num2:     3,
			expected: 8,
		},
		{

			name:     "Negative Numbers",
			num1:     -5,
			num2:     -3,
			expected: -8,
		},
		{

			name:     "Mixed Numbers",
			num1:     5,
			num2:     -3,
			expected: 2,
		},
		{

			name:     "Number with Zero",
			num1:     0,
			num2:     7,
			expected: 7,
		},
		{

			name:     "Both Zero",
			num1:     0,
			num2:     0,
			expected: 0,
		},
		{

			name:     "Large Positive Numbers",
			num1:     2147483646,
			num2:     1,
			expected: 2147483647,
		},
		{

			name:     "Large Negative Numbers",
			num1:     -2147483647,
			num2:     -1,
			expected: -2147483648,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {

			defer func() {
				if r := recover(); r != nil {
					t.Logf("Panic encountered, test failed: %v\n%s", r, string(debug.Stack()))
					t.Fail()
				}
			}()

			actual := Add(tt.num1, tt.num2)

			if actual != tt.expected {
				t.Errorf("Test '%s' failed: expected %d, got %d", tt.name, tt.expected, actual)
			} else {
				t.Logf("Test '%s' passed: expected %d, got %d", tt.name, tt.expected, actual)
			}
		})
	}

}
func captureOsStdout(fn func()) (output string, err error) {

	originalStdout := os.Stdout
	r, w, err := os.Pipe()
	if err != nil {
		return "", err
	}
	os.Stdout = w
	defer func() {
		os.Stdout = originalStdout
		r.Close()
		w.Close()
	}()

	fn()

	var buf []byte
	buf = make([]byte, 2048)
	n, _ := r.Read(buf)
	return string(buf[:n]), nil
}